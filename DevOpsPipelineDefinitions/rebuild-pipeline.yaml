# Rebuild pipeline for Windows Package Manager.

# Name of the run
name: '$(Build.DefinitionName)-$(Build.DefinitionVersion)-$(Date:yyyyMMdd)-$(Rev:r)'

trigger: none
pr: none

jobs:

# Agentless phase. Depends on previous job. 
- job: 'PausePipeline'
  pool: server
  timeoutInMinutes: 1500
  displayName: 'Pause Publish pipeline.'
  steps:
  - task: InvokeRESTAPI@1
    displayName: 'Invoke REST API PATCH'
    inputs:
      connectionType: connectedServiceName
      serviceConnection: 'Build Service Connection'
      method: PATCH
      body: |
        {
            "definition":
            {
                "queueStatus": "paused"
            }
        }
      urlSuffix: 'https://dev.azure.com/microsoft/$(system.teamProject)/_apis/build/builds/49798?api-version=5.1'

# Agent phase.
- job: 'Rebuild'
  displayName: 'Start Rebuild'
  pool:
    vmImage: 'windows-latest'
  dependsOn:
    - 'PausePipeline'
  variables:
    skipComponentGovernanceDetection: ${{ true }}
    runCodesignValidationInjection: ${{ false }}
  steps:

  # Allow scripts to access the system token.
  - checkout: self
    persistCredentials: true
    clean: true

  # Downloads all the setup files and its dependencies.
  - task: AzureCLI@1
    displayName: 'Azure Setup'
    inputs:
      azureSubscription: '$(WinGet.Subscription)'
      scriptLocation: inlineScript
      inlineScript: 'az storage blob download-batch -d . --pattern * -s servicewrapper --output none'
    env:
      AZURE_STORAGE_CONNECTION_STRING: $(ValidationStorageAccountConnectionString)

  # WinGet setup
  - script: 'winget_publish_setup.cmd'
    name: 'wingetsetup'
    displayName: 'WinGet Setup'
    workingDirectory: scripts
    env:
      HOST_KEY: $(AzureFunctionHostKey)
      SIGN_ENDPOINT: $(AzFuncSignEndpoint)

  - task: CmdLine@2
    displayName: 'Validate Manifests'
    inputs:
      script: 'WinGetSvcWrapper.exe rebuild --operationId %BUILD_BUILDNUMBER%'
      failOnStderr: true
    condition: succeeded()
    env:
      AzureWebJobsStorage: $(ValidationStorageAccountConnectionString)
      PackagePublisher: $(PackagePublisher)
      PackageName: $(PackageName)
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)
      DIApplicationInsightKey: $(DIApplicationInsightKey)

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifacts: Logs'
    inputs:
      ArtifactName: Logs
    condition: succeededOrFailed()

# Agentless phase. Depends on previous job. 
- job: 'SignPackage'
  pool: server
  timeoutInMinutes: 1500
  displayName: 'Sign package'
  dependsOn:
    - 'Rebuild'
  variables:
    HostKeySecret: $[ dependencies.Rebuild.outputs['wingetsetup.hostkey']]
    SignEndpointSecret: $[ dependencies.Rebuild.outputs['wingetsetup.signEndpoint']]
  steps:

  # Sign Package Manager package.
  - task: AzureFunction@1
    displayName: 'Signing package'
    inputs:
      function: '$(SignEndpointSecret)'
      key: '$(HostKeySecret)'
      body: |
        {
        "operationId": "$(Build.BuildNumber)",
        "PlanUrl": "$(system.CollectionUri)",
        "HubName": "$(system.HostType)",
        "pipelineType": "RebuildPipeline",
        "ProjectId": "$(system.TeamProjectId)",
        "PlanId": "$(system.PlanId)", 
        "JobId": "$(system.JobId)", 
        "TimelineId": "$(system.TimelineId)", 
        "TaskInstanceId": "$(system.TaskInstanceId)",
        "AuthToken": "$(system.AccessToken)"
        }
      waitForCompletion: "true"

# Agent phase. Depends on previous job.
- job: 'Publish'
  displayName: 'Publish'
  pool:
    vmImage: 'windows-latest'
  variables:
    skipComponentGovernanceDetection: ${{ true }}
    runCodesignValidationInjection: ${{ false }}
  dependsOn:
    - 'SignPackage'
  steps:

  # Downloads all the setup files and its dependencies.
  - task: AzureCLI@1
    displayName: 'Azure Setup'
    inputs:
      azureSubscription: '$(WinGet.Subscription)'
      scriptLocation: inlineScript
      inlineScript: 'az storage blob download-batch -d . --pattern * -s servicewrapper --output none'
    env:
      AZURE_STORAGE_CONNECTION_STRING: $(ValidationStorageAccountConnectionString)

  # Publish rebuild.
  - task: CmdLine@2
    displayName: 'Publish'
    inputs:
      script: 'WinGetSvcWrapper.exe rebuild-publish --operationId %BUILD_BUILDNUMBER%'
      failOnStderr: true
    condition: succeeded()
    env:
      AzureWebJobsStorage: $(ValidationStorageAccountConnectionString)
      AzureServicesAuthConnectionString: $(AzureServicesAuthConnectionString)
      CacheConnectionString: $(BackupCacheConnectionString)
      CacheAStorageAccountConnectionString: $(CacheAStorageAccountConnectionString)
      CacheAStorageAccountName: $(CacheAStorageAccountName)
      CacheBStorageAccountConnectionString: $(CacheBStorageAccountConnectionString)
      CacheBStorageAccountName: $(CacheBStorageAccountName)
      WinGetSubscriptionId: $(WinGetSubscriptionId)
      CdnProfileName: $(CdnProfileName)
      ConnectionStringKvName: $(ConnectionStringKvName)
      DIApplicationInsightKey: $(DIApplicationInsightKey)

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifacts: Logs'
    inputs:
      ArtifactName: Logs
    condition: succeededOrFailed()


# Agent phase. Depends on previous job.
- job: 'Cleanup'
  displayName: 'Cleanup'
  pool:
    vmImage: 'windows-latest'
  dependsOn:
    - 'Rebuild'
    - 'Publish'
    - 'SignPackage'
  condition: succeededOrFailed()
  variables:
    skipComponentGovernanceDetection: ${{ true }}
    runCodesignValidationInjection: ${{ false }}
  steps:

    # Don't clone repo.
  - checkout: none

  - task: AzureCLI@1
    displayName: 'Azure Setup'
    inputs:
      azureSubscription: '$(WinGet.Subscription)'
      scriptLocation: inlineScript
      inlineScript: 'az storage blob download-batch -d . --pattern * -s servicewrapper --output none'
    env:
      AZURE_STORAGE_CONNECTION_STRING: $(ValidationStorageAccountConnectionString)

  - task: CmdLine@2
    displayName: 'Package Manager Cleanup'
    inputs:
      script: 'WinGetSvcWrapper.exe rebuild-cleanup --operationId %BUILD_BUILDNUMBER%'
      failOnStderr: true
    condition: succeeded()
    env:
      AzureWebJobsStorage: $(ValidationStorageAccountConnectionString)
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)
      DIApplicationInsightKey: $(DIApplicationInsightKey)

  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifacts: Logs'
    inputs:
      ArtifactName: Logs
    condition: succeededOrFailed()